package com.project.englishweb.Service.API;

import com.project.englishweb.DTO.ChangeEmailRequest;
import com.project.englishweb.DTO.ChangePasswordRequest;
import com.project.englishweb.DTO.UserAccountDTO;
import com.project.englishweb.DTO.UserPublicProfileDTO;
import com.project.englishweb.Entity.User;
import com.project.englishweb.Repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.time.format.DateTimeFormatter;

@Service
public class UserApiServiceImpl implements UserApiService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserApiServiceImpl(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public UserPublicProfileDTO getPublicProfile(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        UserPublicProfileDTO dto = new UserPublicProfileDTO();
        dto.setUsername(user.getUsername());
        dto.setActiveDays(user.getActiveDays());
        dto.setActiveHours(user.getActiveHours());
        return dto;
    }

    @Override
    public UserAccountDTO getAccountInfo(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        UserAccountDTO dto = new UserAccountDTO();
        dto.setUsername(user.getUsername());
        dto.setEmail(user.getEmail());

        // Định dạng ngày tháng (ví dụ: "yyyy-MM-dd HH:mm:ss")
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        dto.setCreatedAt(user.getCreatedAt().format(formatter)); // Chuyển đổi và định dạng ngày giờ
        return dto;
    }

    @Override
    public void changePassword(String username, ChangePasswordRequest request) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (!passwordEncoder.matches(request.getOldPassword(), user.getPassword())) {
            throw new RuntimeException("Old password is incorrect");
        }

        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        userRepository.save(user);
    }

    @Override
    public void changeEmail(String username, ChangeEmailRequest request) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        user.setEmail(request.getNewEmail());
        userRepository.save(user);
    }
}
