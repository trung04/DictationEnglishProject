package com.project.englishweb.Controller.API;

import com.project.englishweb.DTO.ChangeEmailRequest;
import com.project.englishweb.DTO.ChangePasswordRequest;
import com.project.englishweb.DTO.UserAccountDTO;
import com.project.englishweb.DTO.UserPublicProfileDTO;
import com.project.englishweb.Service.API.UserApiService;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
@CrossOrigin(origins = "http://localhost:3000")
public class UserApiController {

    private final UserApiService userApiService;
    private final String secretKey = "yourSecretKey"; // Sử dụng key của bạn ở đây

    @Autowired
    public UserApiController(UserApiService userApiService) {
        this.userApiService = userApiService;
    }

    @GetMapping("/account")
    public ResponseEntity<UserAccountDTO> getAccountInfo(@RequestHeader("Authorization") String token) {
        try {
            String username = extractUsernameFromToken(token); // Trích xuất username từ token
            UserAccountDTO accountInfo = userApiService.getAccountInfo(username);
            return ResponseEntity.ok(accountInfo);
        } catch (ExpiredJwtException e) {
            return ResponseEntity.status(401).body(null); // Token expired
        } catch (Exception e) {
            return ResponseEntity.status(400).body(null); // Other error
        }
    }

    private String extractUsernameFromToken(String token) {
        try {
            // Lấy phần thông tin Claims từ token JWT
            Claims claims = Jwts.parser()
                    .setSigningKey(secretKey) // Chìa khóa bí mật để xác thực token
                    .parseClaimsJws(token.replace("Bearer ", "")) // Loại bỏ tiền tố "Bearer " nếu có
                    .getBody();
            return claims.getSubject(); // Trả về username (subject của token)
        } catch (ExpiredJwtException e) {
            throw e; // Re-throw for specific handling
        } catch (Exception e) {
            throw new RuntimeException("Invalid token");
        }
    }

    @GetMapping("/profile/{username}")
    public ResponseEntity<UserPublicProfileDTO> getPublicProfile(@PathVariable String username) {
        try {
            UserPublicProfileDTO publicProfile = userApiService.getPublicProfile(username);
            return ResponseEntity.ok(publicProfile);
        } catch (Exception e) {
            return ResponseEntity.status(404).body(null); // User not found
        }
    }

    @PostMapping("/change-password")
    public ResponseEntity<String> changePassword(@RequestHeader("Authorization") String token,
                                                 @RequestBody ChangePasswordRequest request) {
        try {
            userApiService.changePassword(token, request);
            return ResponseEntity.ok("Đổi mật khẩu thành công!");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Đổi mật khẩu thất bại!");
        }
    }

    @PostMapping("/change-email")
    public ResponseEntity<String> changeEmail(@RequestHeader("Authorization") String token,
                                              @RequestBody ChangeEmailRequest request) {
        try {
            userApiService.changeEmail(token, request);
            return ResponseEntity.ok("Đổi email thành công!");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Đổi email thất bại!");
        }
    }
}
