package com.project.englishweb.Controller.API;

import com.project.englishweb.DTO.ChangeEmailRequest;
import com.project.englishweb.DTO.ChangePasswordRequest;
import com.project.englishweb.DTO.UserAccountDTO;
import com.project.englishweb.DTO.UserPublicProfileDTO;
import com.project.englishweb.Service.API.UserApiService;
import com.project.englishweb.config.JwtUtil;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;

import java.nio.charset.StandardCharsets;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
@CrossOrigin(origins = "http://localhost:3000")
public class UserApiController {

    private final UserApiService userApiService;
    private final String secretKey = "yourSecretKey"; 

    @Autowired
    public UserApiController(UserApiService userApiService) {
        this.userApiService = userApiService;
    }

    // Lấy thông tin tài khoản của người dùng
    @Autowired
    private JwtUtil jwtUtil;
    @GetMapping("/account-info")
    public ResponseEntity<UserAccountDTO> getAccountInfo(@RequestHeader(value = "Authorization", required = false) String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(401).body(null);
        }

        String token = authHeader.substring(7); // Loại bỏ "Bearer " prefix
        try {
            if (!jwtUtil.isTokenValid(token)) {
                return ResponseEntity.status(401).body(null);
            }

            String username = jwtUtil.extractUsername(token); // Trích xuất username từ token
            UserAccountDTO accountInfo = userApiService.getAccountInfo(username); // Lấy thông tin người dùng từ service
            if (accountInfo == null) {
                // Nếu không tìm thấy thông tin tài khoản, trả về lỗi 404 hoặc thông báo phù hợp
                return ResponseEntity.status(404).body(null);
            }

            return ResponseEntity.ok(accountInfo); // Trả về thông tin tài khoản
        } catch (Exception e) {
            System.out.println("Error during account info retrieval: " + e.getMessage());
            return ResponseEntity.status(400).body(null); // Trả về lỗi nếu có bất kỳ lỗi nào
        }
    }



    // Trích xuất username từ JWT token
    public String extractUsernameFromToken(String token) {
        try {
            System.out.println("Extracting username from token: " + token);

            // Kiểm tra secretKey, đảm bảo rằng nó khớp với cái bạn sử dụng khi mã hóa token
            Claims claims = Jwts.parserBuilder()
                    .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8)) // Đảm bảo rằng secretKey chính xác
                    .build()
                    .parseClaimsJws(token.replace("Bearer ", "")) // Loại bỏ "Bearer " prefix
                    .getBody();
            
            String username = claims.getSubject();
            System.out.println("Extracted username: " + username);
            
            return username;
        } catch (ExpiredJwtException e) {
            System.out.println("Token expired: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            System.out.println("Error extracting username: " + e.getMessage());
            throw new RuntimeException("Invalid token");
        }
    }


    // Lấy thông tin hồ sơ công khai của người dùng
    @GetMapping("/public-profile/{username}")
    public ResponseEntity<UserPublicProfileDTO> getPublicProfile(@PathVariable String username) {
        try {
            UserPublicProfileDTO publicProfile = userApiService.getPublicProfile(username);
            return ResponseEntity.ok(publicProfile);
        } catch (Exception e) {
            return ResponseEntity.status(404).body(null); // User not found
        }
    }

    // Đổi mật khẩu
    @PostMapping("/update-password")
    public ResponseEntity<String> updatePassword(@RequestHeader(value = "Authorization", required = false) String token,
                                                 @RequestBody ChangePasswordRequest request) {
        if (token == null || !token.startsWith("Bearer ")) {
            return ResponseEntity.status(401).body("Unauthorized: No token provided.");
        }

        try {
            userApiService.changePassword(token, request);
            return ResponseEntity.ok("Đổi mật khẩu thành công!");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Đổi mật khẩu thất bại!");
        }
    }

    // Đổi email
    @PostMapping("/update-email")
    public ResponseEntity<String> updateEmail(@RequestHeader(value = "Authorization", required = false) String token,
                                              @RequestBody ChangeEmailRequest request) {
        if (token == null || !token.startsWith("Bearer ")) {
            return ResponseEntity.status(401).body("Unauthorized: No token provided.");
        }

        try {
            userApiService.changeEmail(token, request);
            return ResponseEntity.ok("Đổi email thành công!");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Đổi email thất bại!");
        }
    }
}
