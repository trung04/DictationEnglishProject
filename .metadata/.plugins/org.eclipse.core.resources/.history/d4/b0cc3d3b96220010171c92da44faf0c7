package com.project.englishweb.Controller.API;

import com.project.englishweb.DTO.ChangeEmailRequest;
import com.project.englishweb.DTO.ChangePasswordRequest;
import com.project.englishweb.DTO.UserAccountDTO;
import com.project.englishweb.DTO.UserPublicProfileDTO;
import com.project.englishweb.Service.API.UserApiService;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.Claims;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
@CrossOrigin(origins = "http://localhost:3000")
public class UserApiController {

    private final UserApiService userApiService;
    private final String secretKey = "yourSecretKey"; // Sử dụng key của bạn ở đây

    @Autowired
    public UserApiController(UserApiService userApiService) {
        this.userApiService = userApiService;
    }

    @GetMapping("/account")
    public UserAccountDTO getAccountInfo(@RequestHeader("Authorization") String token) {
        String username = extractUsernameFromToken(token); // Trích xuất username từ token
        return userApiService.getAccountInfo(username);
    }

    // Trích xuất username từ token
    private String extractUsernameFromToken(String token) {
        // Lấy phần thông tin Claims từ token JWT
        Claims claims = Jwts.parser()
                .setSigningKey(secretKey) // Chìa khóa bí mật để xác thực token
                .parseClaimsJws(token.replace("Bearer ", "")) // Loại bỏ tiền tố "Bearer " nếu có
                .getBody();
        return claims.getSubject(); // Trả về username (subject của token)
    }

    @GetMapping("/profile/{username}")
    public UserPublicProfileDTO getPublicProfile(@PathVariable String username) {
        return userApiService.getPublicProfile(username);
    }

    @PostMapping("/change-password")
    public ResponseEntity<String> changePassword(@RequestHeader("Authorization") String token,
                                                 @RequestBody ChangePasswordRequest request) {
        userApiService.changePassword(token, request);
        return ResponseEntity.ok("Đổi mật khẩu thành công!");
    }

    @PostMapping("/change-email")
    public ResponseEntity<String> changeEmail(@RequestHeader("Authorization") String token,
                                              @RequestBody ChangeEmailRequest request) {
        userApiService.changeEmail(token, request);
        return ResponseEntity.ok("Đổi email thành công!");
    }
}
